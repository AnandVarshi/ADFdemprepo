{
	"name": "df_conditionalsplit",
	"properties": {
		"folder": {
			"name": "Multiple inputs-Outputs"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Dept",
						"type": "DatasetReference"
					},
					"name": "Dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dept1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Dept2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "Others",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DEPID as string,",
				"          DEPTNAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dept",
				"Dept split(equals(DEPID,'11'),",
				"     equals(DEPID,'12'),",
				"     disjoint: false) ~> split1@(Dept1, Dept2, Dept3)",
				"split1@Dept1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dept1'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@Dept2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dept2'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"split1@Dept3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Others'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}